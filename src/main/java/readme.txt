
1.设计模式，不是一种新的语言，也不是什么新的api，更不是什么新的语法

2.设计模式是前辈们不断总结 不断打磨出来的设计方法。不同设计模式适用于不同的场景

3.设计模式，共有的有23中，分别对应23中涉及场景，这些设计模式，我们不用怀疑它的功能！
亢这些设计模式是经过长期实践考验而留存下来的

4.千万不要以为有任何一种设计模式，能解决任何问题，每一种设计模式都有适用的场景

5.防止模式的乱用


6.23种设计模式，背后其实是7大设计原则，每个设计模式都归属于一个或者多个设计原则

7.7大设计原则的背后就是： 分！！

8.七大设计原则：
    a) 单一职责
        一个类，一个方法，只负责一件事情
    b) 里氏替换原则
        在任何使用父类对象的地方，替换为子类对象以后，程序不会有问题出现
    c) 依赖倒转原则
        上层不能依赖于下层，它们都应该依赖于抽象。
        举例：Dao service 通过dao接口+dao工厂来访问下层的dao实现的。
        以后扩展Dao实现的时候，上层service是不用改动的
    d）开闭原则
        对扩展开放
        对修改关闭

    e) 最少知道原则 迪米特
        最少知道原则，其实就是个封装问题。
        只和朋友通信，
            方法参数
            方法返回类型
            方法内 实例化出来的局部变量
            类中的字段
        不算朋友：就是我通过一个朋友的一个get 获取的类的实例
    f) 接口隔离原则
        多个专门的接口总比只用一个单一的接口好

    g) 组合优于继承原则
        白马非马 对于某个特定的业务而言：正方系不是长方形


9.体会一下“分”字的威力：
   火药 造纸 指南针 活字印刷

   曹操 短歌行
   吃饭喝酒 人生真爽
   。。。。

   工匠刻字

   改！！ 对酒当歌 人生真爽  然后就是对酒当歌 人生几何

9.学习设计模式 脑袋里始终要绷紧两根弦
    a.开发代码的程序猿 被划分为两种角色
    作者（服务端的程序猿）
    用户（客户端的程序猿）

    比如我们在使用c3p0的时候，制作这个的程序猿就是作者，我们自己就是客户端程序猿

    b.我们手头并不会是时时刻刻都有作者的源代码的，比如在使用c3p0的时候，我们能用，但是我们找不到原码文件

