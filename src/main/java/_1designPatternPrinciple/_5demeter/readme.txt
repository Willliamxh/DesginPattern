迪米特法则，也叫最少知道原则（封装）

就是一个类，对于其它类，要知道的越少越好

只和朋友交流

前面说的，只和朋友通信，不和陌生人说话。先来明确一下什么才叫做朋友：

什么是朋友？#
类中的字段
方法的返回值
方法的参数
方法中的实例对象 方法直接new 就是朋友
对象本身
集合中的泛型
总的来说，只要在自身内定义的就是朋友，通过其他方法得到的都只是朋友的朋友；

但是，朋友的朋友不是我的朋友。
就是我通过一个朋友的一个get 获取的类的实例


在实际开发中，要完全符合迪米特法则，也会有缺点：

在系统里造出大量的小方法，这些方法仅仅是传递间接的调用，与系统的业务逻辑无关。

遵循类之间的迪米特法则会是一个系统的局部设计简化，因为每一个局部都不会和远距离的对象有直接的关联。但是，这也会造成系统的不同模块之间的通信效率降低，也会使系统的不同模块之间不容易协调。

因此，前人总结出，一些方法论以供我们参考：

优先考虑将一个类设置成不变类。

尽量降低一个类的访问权限。

谨慎使用Serializable。

尽量降低成员的访问权限。

虽然规矩很多，但是理论需要深刻理解，实战需要经验积累。路还很长。


